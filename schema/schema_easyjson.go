// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package schema

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema(in *jlexer.Lexer, out *Token) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "CharacterID":
			out.CharacterID = uint(in.Uint())
		case "ExpiresAt":
			out.ExpiresAt = int64(in.Int64())
		case "Type":
			out.Type = string(in.String())
		case "Scopes":
			out.Scopes = string(in.String())
		case "expires_in":
			out.ExpiresIn = int(in.Int())
		case "access_token":
			out.AccessToken = string(in.String())
		case "refresh_token":
			out.RefreshToken = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema(out *jwriter.Writer, in Token) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"CharacterID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.CharacterID))
	}
	{
		const prefix string = ",\"ExpiresAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ExpiresAt))
	}
	{
		const prefix string = ",\"Type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scopes))
	}
	{
		const prefix string = ",\"expires_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ExpiresIn))
	}
	{
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"refresh_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RefreshToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Token) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Token) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Token) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Token) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema1(in *jlexer.Lexer, out *Skill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "skill_id":
			out.ID = uint(in.Uint())
		case "skillpoints_in_skill":
			out.Skillpoints = uint(in.Uint())
		case "trained_skill_level":
			out.TrainedLevel = uint(in.Uint())
		case "active_skill_level":
			out.ActiveLevel = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema1(out *jwriter.Writer, in Skill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"skill_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"skillpoints_in_skill\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Skillpoints))
	}
	{
		const prefix string = ",\"trained_skill_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.TrainedLevel))
	}
	{
		const prefix string = ",\"active_skill_level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ActiveLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Skill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Skill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Skill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Skill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema1(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema2(in *jlexer.Lexer, out *Payload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(Payload)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v1 interface{}
			if m, ok := v1.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := v1.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				v1 = in.Interface()
			}
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema2(out *jwriter.Writer, in Payload) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v2Name))
			out.RawByte(':')
			if m, ok := v2Value.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v2Value.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v2Value))
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema2(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema3(in *jlexer.Lexer, out *Owner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CharacterID":
			out.CharacterID = uint(in.Uint())
		case "CharacterName":
			out.CharacterName = string(in.String())
		case "ExpiresOn":
			out.ExpiresOn = string(in.String())
		case "Scopes":
			out.Scopes = string(in.String())
		case "TokenType":
			out.TokenType = string(in.String())
		case "CharacterOwnerHash":
			out.CharacterOwnerHash = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema3(out *jwriter.Writer, in Owner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CharacterID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.CharacterID))
	}
	{
		const prefix string = ",\"CharacterName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CharacterName))
	}
	{
		const prefix string = ",\"ExpiresOn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpiresOn))
	}
	{
		const prefix string = ",\"Scopes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Scopes))
	}
	{
		const prefix string = ",\"TokenType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TokenType))
	}
	{
		const prefix string = ",\"CharacterOwnerHash\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CharacterOwnerHash))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Owner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Owner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Owner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Owner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema3(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema4(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "payload":
			(out.Payload).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema4(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Payload).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema4(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema5(in *jlexer.Lexer, out *Jobs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Jobs, 0, 1)
			} else {
				*out = Jobs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v3 Job
			(v3).UnmarshalEasyJSON(in)
			*out = append(*out, v3)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema5(out *jwriter.Writer, in Jobs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v4, v5 := range in {
			if v4 > 0 {
				out.RawByte(',')
			}
			(v5).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Jobs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Jobs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Jobs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Jobs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema5(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema6(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "job_id":
			out.EveID = uint(in.Uint())
		case "installer_id":
			out.InstallerID = uint(in.Uint())
		case "facility_id":
			out.FacilityID = uint64(in.Uint64())
		case "station_id":
			out.StationID = uint64(in.Uint64())
		case "activity_id":
			out.ActivityID = uint(in.Uint())
		case "blueprint_id":
			out.BlueprintID = uint64(in.Uint64())
		case "blueprint_type_id":
			out.BlueprintTypeID = uint(in.Uint())
		case "blueprint_location_id":
			out.BlueprintLocationID = uint64(in.Uint64())
		case "output_location_id":
			out.OutputLocationID = uint64(in.Uint64())
		case "runs":
			out.Runs = uint(in.Uint())
		case "cost":
			out.Cost = float32(in.Float32())
		case "licensed_runs":
			out.LicensedRuns = uint(in.Uint())
		case "probability":
			out.Probability = float64(in.Float64())
		case "product_type_id":
			out.ProductTypeID = uint(in.Uint())
		case "status":
			out.Status = string(in.String())
		case "duration":
			out.Duration = uint(in.Uint())
		case "start_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "end_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		case "pause_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PauseDate).UnmarshalJSON(data))
			}
		case "completed_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompletedDate).UnmarshalJSON(data))
			}
		case "completed_character_id":
			out.CompletedCharacterID = uint(in.Uint())
		case "successful_runs":
			out.SuccessfulRuns = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema6(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"job_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.EveID))
	}
	{
		const prefix string = ",\"installer_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.InstallerID))
	}
	{
		const prefix string = ",\"facility_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FacilityID))
	}
	{
		const prefix string = ",\"station_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.StationID))
	}
	{
		const prefix string = ",\"activity_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ActivityID))
	}
	{
		const prefix string = ",\"blueprint_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlueprintID))
	}
	{
		const prefix string = ",\"blueprint_type_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.BlueprintTypeID))
	}
	{
		const prefix string = ",\"blueprint_location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.BlueprintLocationID))
	}
	{
		const prefix string = ",\"output_location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.OutputLocationID))
	}
	{
		const prefix string = ",\"runs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Runs))
	}
	{
		const prefix string = ",\"cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Cost))
	}
	{
		const prefix string = ",\"licensed_runs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.LicensedRuns))
	}
	{
		const prefix string = ",\"probability\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Probability))
	}
	{
		const prefix string = ",\"product_type_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ProductTypeID))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Duration))
	}
	{
		const prefix string = ",\"start_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.StartDate))
	}
	{
		const prefix string = ",\"end_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.EndDate))
	}
	{
		const prefix string = ",\"pause_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.PauseDate))
	}
	{
		const prefix string = ",\"completed_date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.CompletedDate))
	}
	{
		const prefix string = ",\"completed_character_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.CompletedCharacterID))
	}
	{
		const prefix string = ",\"successful_runs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.SuccessfulRuns))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Job) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Job) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Job) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Job) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema6(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema7(in *jlexer.Lexer, out *CharactersList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CharactersList, 0, 1)
			} else {
				*out = CharactersList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v6 Character
			(v6).UnmarshalEasyJSON(in)
			*out = append(*out, v6)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema7(out *jwriter.Writer, in CharactersList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in {
			if v7 > 0 {
				out.RawByte(',')
			}
			(v8).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CharactersList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharactersList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharactersList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharactersList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema7(l, v)
}
func easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema8(in *jlexer.Lexer, out *Character) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint(in.Uint())
		case "name":
			out.Name = string(in.String())
		case "is_main":
			out.IsMain = bool(in.Bool())
		case "is_mailing":
			out.IsMailing = bool(in.Bool())
		case "is_industrial":
			out.IsIndustrial = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema8(out *jwriter.Writer, in Character) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"is_main\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsMain))
	}
	{
		const prefix string = ",\"is_mailing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsMailing))
	}
	{
		const prefix string = ",\"is_industrial\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsIndustrial))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Character) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Character) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComSanyokbigCatsIndustryServerSchema8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Character) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Character) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComSanyokbigCatsIndustryServerSchema8(l, v)
}
